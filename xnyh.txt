内存泄漏形成原因：一个需要回收的对象，因为被其他对象持有引用,导致对象无法被系统回收,该对象在堆中所占有的内存单元无法被释放而造成内存空间浪费。
1handler（弱引用WeakRefrence），webview（单独放一个进程）;
2内存频繁分配和回收（频繁创建对象）；频繁创建对象，导致内存不足及碎片（不连续）。不连续的内存片无法被分配，导致OOM。（内存抖动）
3注册对象未注销，eventbus，BroadcastReceiver;资源对象使用之后关闭；
4静态对象；单例；持有的context不能是activity应该为Application


内存抖动优化：
1字符串操作使用StringBuilder，设置容量，减少StringBuilder的扩容；
2全局缓存池，以 重用频繁申请和释放的对象；结束 使用后，需要 手动释放对象池中的对象；
3避免在循环中不断创建新的对象，作复用；
4加载图片的3级缓存机制（采用内存缓存和磁盘缓存。）；加载图片的位图格式；BitampFactory.Options.inSampleSize可以压缩图片宽高；
5在App退到后台内存紧张即将被Kill掉时选择重写 onTrimMemory/onLowMemory 方法去释放掉图片缓存、静态缓存来自保。
6在合适的时候适当采用软引用和弱引用。


android内存优化的意义：
1、减少OOM，提高应用稳定性。
2、减少卡顿，提高应用流畅度。
3、减少内存占用，提高应用后台运行时的存活率。
4、减少异常发生和代码逻辑隐患。

工具：
1profile
1.1Allocations:实例数量
1.2NativeSize：它是类对象所引用的 Native 对象 所消耗的内存大小:
1.3ShallowSize:对象本身消耗的内存大小
1.4Retained Size:类对象所持有的对象的总大小；
1.5Depth:GC Root 到达这个实例的最短路径;

2LeakCanary
1它hook了Android的生命周期，当activity和fragment 被销毁并且应该被垃圾回收时候自动检测。这些被销毁的对象被传递给ObjectWatcher， ObjectWatcher持有这些被销毁对象的弱引用（weak references）。
如果弱引用在等待5秒钟并运行垃圾收集器后仍未被清除，那么被观察的对象就被认为是保留的（retained，在生命周期结束后仍然保留），并存在潜在的泄漏。LeakCanary会在Logcat中输出这些日志。
2对于每个被保留的对象，LeakCanary会找出阻止该保留对象被回收的引用链：泄漏路径。泄露路径就是从GC ROOTS到保留对象的最短的强引用路径的别名；
3LeakCanary会计算一个泄漏路径并在UI上展示出来。
4路径中的每一个节点都对应着一个java对象。根据“可达性分析算法”从GC ROOTS向下搜索，一直去找引用链，如果某一个对象跟GC Roots没有任何引用链相连时，就证明对象是”不可达“的，可以被回收。
5Leaking的状态（YES、NO、UNKNOWN），NO表示没泄露。
6我们只要顺着LeakCaneray的给出的引用链一个个的往下找，找到发生内存泄露的地方，切断引用链就可以释放内存了。
7一般推断内存泄露是从最后一个没有泄漏的节点（Leaking: NO ）到第一个泄漏的节点（Leaking: YES）之间的引用。

3mat:
命令：hprof-conv  memory-20220219T174354.hprof  66.hrof
1、Histogram 列出内存中的所有实例类型对象和其个数以及大小，并在顶部的regex区域支持正则表达式查找。
2、Dominator Tree 列出最大的对象及其依赖存活的Object。相比Histogram，能更方便地看出引用关系。
3、Top Consumers 通过图像列出最大的Object。
4、Leak Suspects  通过MAT自动分析内存泄漏的原因和泄漏的一份总体报告。
分析内存最常用的是Histogram和Dominator Tree这两个视图：
Class Name：类名。
Objects：对象实例个数。
Shallow Heap：对象自身占用的内存大小，不包括它引用的对象。非数组的常规对象的Shallow Heap Size由其成员变量的数量和类型决定，数组的Shallow Heap Size由数组元素的类型（对象类型、基本类型）和数组长度决定。真正的内存都在堆上，看起来是一堆原生的byte[]、char[]、int[]，对象本身的内存都很小。因此Shallow Heap对分析内存泄漏意义不是很大。
Retained Heap：是当前对象大小与当前对象可直接或间接引用到的对象的大小总和，包括被递归释放的。即：Retained Size就是当前对象被GC后，从Heap上总共能释放掉的内存大小。
1、按照包名类型分类进行实例筛选或直接使用顶部Regex选取特定实例。
2、右击选中被怀疑的实例对象，选择Merge Shortest Paths to GC Root->exclude all phantom/weak/soft etc references。(显示GC Roots最短路径的强引用)
3、分析引用链或通过代码逻辑找出原因。
1、在两个HPROF文件中，把Histogram或者Dominator Tree增加到Compare Basket。
2、在Compare Basket中单击 ! ，生成对比结果视图。这样就可以对比相同的对象在不同阶段的对象实例个数和内存占用大小，如明显只需要一个实例的对象，或者不应该增加的对象实例个数却增加了，说明发生了内存泄漏，就需要去代码中定位具体的原因并解决。
需要注意的是，如果目标不太明确，可以直接定位RetainedHeap最大的Object，通过Select incoming references查看引用链，定位到可疑的对象，然后通过Path to GC Roots分析引用链。
此外，我们知道，当Hash集合中过多的对象返回相同的Hash值时，会严重影响性能，这时可以用 Map Collision Ratio 查找导致Hash集合的碰撞率较高的罪魁祸首。



优化
启动优化：
热启动
冷启动：
1系统进程展示starting window(空白window)
2Zygote 创建要启动app的进程；
3创建并启动app进程的Application
4启动Activity执行onCreate,onstart,onresume;  
5ViewRootImpl绘制View;
耗时间统计：
1启动时在Application和第一个Activity加入打点统计
2应用程序的生命周期节点。启动时需要初始化的重要方法，例如数据库初始化，读取本地的一些数据。其他耗时的一些算法。
启动优化方案：
1使用Activity的windowBackground主题属性预先设置一个启动图片（layer-list实现），在启动后，在Activity的onCreate()方法中的super.onCreate()前再setTheme(R.style.AppTheme)。
2第三方库懒加载
3第三方库异步加载
4延迟初始化；
5布局优化；
6绘制优化；

线程优化：
线程调度原理：
1、任意时刻，只有一个线程占用CPU，处于运行状态。
2、多线程并发，轮流获取CPU使用权。
3、JVM负责线程调度，按照特定机制分配CPU使用权。
设定优先级方法：Process.setThreadPriority(int i) 这个函数，去设定线程的优先级。数值越大，那么优先级就越低。
异步方式：
1RxJava:由强大的调度器Scheduler集合提供。不同类型的Scheduler：IO Computation;
2java线程池；
3IntentService：优先级较高，不易被系统Kill。
优化手段：
1线程统一线程池管理；
2统一线程池注意cpu密集型和io密集型任务区分；IO密集型任务：IO密集型任务不消耗CPU，核心池可以很大。常见的IO密集型任务如文件读取、写入，网络请求等等。
CPU密集型任务：核心池大小和CPU核心数相关。常见的CPU密集型任务如比较复杂的计算操作，此时需要使用大量的CPU计算单元。
3重要异步任务统计耗时、注重异步任务优先级和线程名的设置。


布局优化:
1、在setContentView方法中，会通过LayoutInflater的inflate方法去加载对应的布局。
2、inflate方法中首先会调用Resources的getLayout方法去通过IO的方式去加载对应的Xml布局解析器到内存中。
3、接着，会通过createViewFromTag根据每一个tag创建具体的View对象。
4、它内部主要是按优先顺序为Factory2和Factory的onCreatView、createView方法进行View的创建，而createView方法内部采用了构造器反射的方式实现。
从以上分析可知，在Android的布局加载流程中，性能瓶颈主要存在两个地方：
1、布局文件解析中的IO过程。
2、创建View对象时的反射过程。
优化方式：
1viewstub,按需加载; 
2避免过度绘制，避免多个重叠的background;
3优化工具：使用Systrace来进行布局优化、利用Layout Inspector来查看视图层级结构、采用Choreographer来获取FPS
4获取界面布局耗时：使用AOP的方式去获取界面加载的耗时、利用LayoutInflaterCompat.setFactory2去监控每一个控件加载的耗时。
5布局优化的进阶方案：使用异步布局框架Litho
6AsyncLayoutInflater异步加载layout和创建view；

Fps:
1每秒显示的帧数，也叫 帧率
绘制优化：ondraw方法避免耗时操作，避免频繁创建局部对象；
内存泄漏优化：静态变量导致的对象回收问题，资源流等的回收问题；图片加载优化；
线程优化：使用线程池管理线程；
webview优化：预加载webview； 资源加载优化；

包体积优化：
删除无用的资源；
项目资源压缩 ，开启混淆，压缩资源，压缩代码；  minifyEnabled;  zipAlignEnabled;  shrinkResources;
配置cpu架构，打包的时候保留一个就行；



AOP/AspectJX 
AOP 是在编译完成后生成 dex 文件之前的时候，直接通过修改 .class 文件的方式，来直接添加或者修改代码逻辑的。
作用：
1代码监控，网络数据监控、耗时方法监控、大图监控、线程监控 ；
2代码修改，统一处理点击抖动，第三方 SDK 的容灾处理，实现热修复框架；
3代码分析，可以找出 不合理的 Hanlder 使用、new Thread 调用、敏感权限调用 等等一系列编码问题。
4无侵入性，修改方便；
具体作用：
1）、在方法（包括构造方法）被调用的位置。
2）、在方法体（包括构造方法）的内部。
3）、在读写变量的位置。
4）、在静态代码块内部。
5）、在异常处理的位置的前后。
此外，它也可以 直接将原位置的代码替换为自定义的代码。
使用：
1、Before：PointCut之前执行
2、After：PointCut之后执行
3、Around：PointCut之前、之后分别执行
1、call：插入在函数体里面
2、execution：插入在函数体外面
3 正则表达式匹配打点方法；

Drawable文件夹：存放png,jpeg,gif,.9,xml;
mipmap:而以mipmap开头的目录存放的是App的图标；













