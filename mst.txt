

1String StringBuilder StringBuffer的区别
 String的值是不可变的,这就导致每次对String的操作都会产生新的String对象。
StringBuffer  线程安全可变类 ，每个对象有一个缓冲区，字符串超过容量时侯会增加缓冲区的大小
StringBuilder 可变类 速度比较快 线程不安全

2 ==和equals 在Object中equals返回的是==的判断
   ==比较的是两个对象堆内存地址
   在String中，String定义的变量指向一个常量池 
  String str1 = "a" + "b" + "c";  在常量池和堆里面都有str1对应内容的副本
  String str2 = "abc"; 直接在常量表里面找
  String str3 = new String("abc"); 在堆里面重新开辟一个新空间。
  str1==str2 true      str1==str3 false                             str1.equals(str2)true         3个的hashcode是相同的。
两个值相等的 Integer 对象，== 比较，判断是否相等
Integer i=12 Integer b =12  i==b  true  [-128，127]范围内通过这种方式不会new新的对象
new Integer(12)==new Interger(12)     false  猜测

3 synchronized 修饰 static 方法、普通方法、类、方法块区别
同步代码块仅仅是给代码块加锁
修饰一个普通方法，如果一个对象里面多个普通方法加，有一个调用，其他都要等待
修饰一个静态方法,如果一个类里面有多个静态方法加，有一个调用，其他都要等待
修饰一个类，整个类的所有对象都被锁住

JVM与android虚拟机区别
jvm：执行的是class文件；dalvik：执行的是dex
类加载系统与jvm区别较大
jvm只能存在一个；dalvik可以同时存在多个dvm
dalvk基于寄存器，jvm基于栈（内存)

4volatile 的作用和原理
 作用：内存可见性（Memory Visibility）：所有线程都能看到共享内存的最新状态
Java通过几种原子操作完成工作内存和主内存的交互：
lock：作用于主内存，把变量标识为线程独占状态。
unlock：作用于主内存，解除独占状态。
read：作用主内存，把一个变量的值从主内存传输到线程的工作内存。
load：作用于工作内存，把read操作传过来的变量值放入工作内存的变量副本中。
use：作用工作内存，把工作内存当中的一个变量值传给执行引擎。
assign：作用工作内存，把一个从执行引擎接收到的值赋值给工作内存的变量。
store：作用于工作内存的变量，把工作内存的一个变量的值传送到主内存中。
write：作用于主内存的变量，把store操作传来的变量的值放入主内存的变量中。
volatile如何保持内存可见性
volatile的特殊规则就是：
read、load、use动作必须连续出现。
assign、store、write动作必须连续出现。
所以，使用volatile变量能够保证:
每次读取前必须先从主内存刷新最新的值。
每次写入后必须立即同步回主内存当中



6 APK 的打包过程是什么？
aapt 工具打包资源文件，生成 R.java 文件
aidl 工具处理 AIDL 文件，生成对应的 .java 文件
javac 工具编译 Java 文件，生成对应的 .class 文件
把 .class 文件转化成 Davik VM 支持的 .dex 文件
apkbuilder 工具打包生成未签名的 .apk 文件
jarsigner 对未签名 .apk 文件进行签名
zipalign 工具对签名后的 .apk 文件进行对齐处理

7 http协议与websocket协议
   http协议是基于TCP/IP协议之上的应用层协议。基于请求-响应的模式,请求必须由客户端发出。无状态保存，HTTP协议 自身不对请求和响应之间的通信状态进行保存
限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。在 HTTP1.1 中进行了改进，使得有一个 keep-alive，也就是说，在一个
 HTTP 连接中，可以发送多个 Request，接收多个 Response。但是请记住 Request = Response， 在 HTTP 中永远是这样，也就是说一个 Request 只能有一个 Response。
而且这个 Response 也是被动的，不能主动发起。
   websocket建立在tcp/ip协议上，握手阶段也是用的http协议,可以发送文本或者二进制数据。是持久化协议。Upgrade: websocket Connection: Upgrade这两个请求头
告诉服务器发起的请求是websocket协议

8 webView 
   Android的Webview在低版本和高版本采用了不同的webkit版本内核，4.4后直接使用了Chrome。
   webview常用工具类： WebSetting配置（设置缓存，交互等）复写shouldOverrideUrlLoading()方法，使得打开网页时不调用系统浏览器， 而是在本WebView中显示；  
  WebViewClient（各种状态的回调，包括加载资源，加载开始，加载结束等，处理https请求；  
   WebChromeClient类 （对话框，标题，网页加载进度）
   webview.onresume 正常激活状态
   webview.onpause 页面失去焦点时候可以调用，暂停所有的动作，比如DOM的解析、plugin的执行、JavaScript执行
   webview.pauseTimers 针对所有webview 当应用切换到后台。它会暂停所有webview的layout，parsing，javascripttimer。降低CPU功耗。
   webView.resumeTimers()；//恢复pauseTimers状态
 如何避免webview内存泄漏：
 不在xml中定义 Webview ，而是在需要的时候在Activity中创建，并且Context使用 getApplicationgContext()
 在 Activity 销毁（ WebView ）的时候，先让 WebView 加载null内容，然后移除 WebView，再销毁 WebView，最后置空

 Android调用js:
 mWebView.loadUrl("javascript:js方法名字()");JS代码调用一定要在 onPageFinished（） 回调之后才能调用，否则不会调用。
 4.4之后新增了evaluateJavascript（"javascript:js方法名字()"，回调接口 ） 效率高，容易拿到js的回调数据

 js调安卓:
 1WebView.addJavascriptInterface(new AndroidtoJs(), "test");//AndroidtoJS类对象映射到js的test对象,注册对象
    对象里面被js调用的方法添加 @JavascriptInterface 这个方案存在内存泄漏
2 通过WebViewClient 的shouldOverrideUrlLoading（）拦截url，在约定好url协议，客户端解析url然后调用相关的android方法，
传递数据比较麻烦，只能通过mWebView.loadUrl("javascript:js方法名字()")把数据传到js。 没有内存泄漏
3通过WebChromeClient.onJsAlert方法，约定好协议，调用本地方法后通过JsPromptResult方法可以回调数据，原理跟上面2一样。 没有内存泄漏

预加载webview对象：
构建webview缓存池，在打开h5页面之前提前将webview初始化；
通过WebViewClient的 shouldInterceptRequest（这个方法可以拿到所有的资源请求的url） 拦截js，css，图片文件,提前将要缓存的资源文件放到android项目的Asset文件下;

9线程
  join方法
  优先级低的线程仅仅是执行的频率较低，而不是说优先级低的线程一定比优先级高的线程后执行。
  sleep和wait
  sleep() 是 Thread 类的静态方法，wait() 是 Object 类中的方法
  在同步中，对 CPU 的执行权和锁的处理不同：wait() 方法释放 CPU 执行权，并且释放锁；sleep() 方法释放 CPU 执行权，不释放锁。
  调用场合不同：sleep() 方法可以在任何地方调用；wait() 方法只能在同步中调用，如果不在同步中调用，会抛出 IllegalMonitorStateException。
  中断线程：
  不要使用 Thread 的 stop() 方法，该方法已被标记为 @Deprecated。官方推荐我们使用 Thread 的 interrupt() 方法来发出中断信号，这是一种协作式的中断。Sleep和wait可以清楚中断标记。 
  Thread.yield() 
  用于使当前线程放弃对处理器的占用，相当于是降低线程优先级
  调用这个方法只是给调度器发出一个信号，当前线程愿意让出 CPU 的执行权。但是，调度器可以忽略掉这个信号。


11 线程和服务的区别
感觉是两个不同的概念。虽然两者都能执行异步操作，两者都不可见。 服务一般运行在主线程，不能处理耗时操作，会出现anr. 服务可以被多个
activity绑定。线程一般只在一个activity工作

12 普通view和surfaceview的区别
surfaceview继承自view,view在ui主线程更新自己，surfaceview在一个子线程中更新自己。
SurfaceVIew拥有独立绘图层Surface,Surface就是内存中一段绘图缓存区，SurfaceView拥有两个Surface，也就是双缓冲机制。
SurfaceHolder是surface的持有者，Surfaceview通过它来对Surface进行管理控制，通过getHoler()获得对应的。
Surface是在SurfaceView所在的Window可见的时候创建的，我们可以使用SurfaceHolder.addCallback()监听Surface的创建和销毁事件。

13为何Intent不能直接在组件间传递对象而要通过序列化机制？
Intent在启动其他组件时，会离开当前应用程序进程，进入ActivityManagerService进程（intent.prepareToLeaveProcess()），这也就意味着，Intent所携带的数据要能够在不同进程间传输。
首先我们知道，Android是基于Linux系统，不同进程之间的java对象是无法传输，所以我们此处要对对象进行序列化，从而实现对象在 应用程序进程 和 ActivityManagerService进程 之间传输。
而Parcel或者Serializable都可以将对象序列化，其中，Serializable使用方便，但性能不如Parcel容器，后者也是Android系统专门推出的用于进程间通信等的接口

14Android中Intent/Bundle的通信原理及大小限制
Intent 中的 Bundle 是使用 Binder 机制进行数据传送的。能使用的 Binder 的缓冲区是有大小限制的（有些手机是 2 M），而一个进程默认有 16 个 Binder 线程，所以一个线程能占用的缓冲区就更小了（
 有人以前做过测试，大约一个线程可以占用 128 KB）

15主线程looper开启死循环为什么不会导致ARN
ANR是指主线程没有及时响应，是因为消息队列当中的事件没有得到及时的处理造成的；跟死循环没有关系；

16：Activity、Window、View的关系
1Activity包含了一个PhoneWindow，而PhoneWindow就是继承于Window的，Activity通过setContentView将View设置到了PhoneWindow上。Window的添加过程以及Activity的启动流程都是一次IPC的过程。
Activity的启动需要通过AMS完成；Window的添加过程需要通过WindowSession完成。
2Activity要管理View需要通过Window来间接管理的。Window通过addView()、removeView()、updateViewLayout()这三个方法来管理View的。
3Window对View的操作是通过WindowManager来处理的。WindowManager提供在Window上添加View、移除View、更新View的操作。真正的实现类是WindowManagerImpl；
4PhoneWindow也是Activity和View系统交互的接口

17Application和Activity的Context区别
1context是前两者的基类；
2activity是一个组件，进程没启动一个就会创建一个实例，它有自己的生命周期；
3Application是进程创建的时候系统创建的，生命周期跟创建它的进程保持一致；


开闭原则：
1对修改关闭，对扩展开放；
2在程序需要扩展的时候，对于一个类，不要去修改原来的代码，而是通过继承的方式去扩展这个类。
3目的：降低维护风险。

单一职责：每个类应该且只有一个职责；提高可读性；

里式替换原则：
1子类继承父类时，可以实现父类的抽象方法，不要 重写 父类的方法，子类增加自己特有的方法。
2目的：防止继承带来的问题。

依赖倒转原则（Dependency Inversion Principle）
1程序要依赖于抽象接口，不要依赖，于具体实现，针对接口编程。
2目的：利于代码升级。

接口隔离原则（Interface Segregation Principle）
1庞大的接口拆分成更小的和更具体的接口，一个接口只用于一个业务逻辑。
2目的：使功能解耦，高内聚、低耦合。

迪米特原则（Principle of Least Knowledge）
1一个对象应当对其他对象尽可能少的了解。
2目的：自己做自己的事情。

合成复用原则（Composite Reuse Principle）
1使用对象组合，而不是继承来达到复用的目的。
2继承破坏了封装性，父类的任何改变，都可能导致子类出问题。
优先考虑 合成复用，A类和B类的合成使用，而不是B继承A的使用。
目的：少用继承 降低耦合

1单例模式：
优点：内存中只有一个实例，减少开销
缺点：没有接口，不能继承，违背了单一职责原则。
public class Singleton{
    private volatile static Singleton instance;
    private Singleton(){};
    public static Singleton getInstance(){
        if(instance==null){
            sychronized(Singleton.class){
                if(instance==null)
                    instance=new Singleton();
            }
        }
        return instatnce;
    }
}

2工厂模式：解决接口选择问题
优点：想要创建对象，只要知道名字就行，屏蔽了内部实现，只要关心接口；
缺点：增加一个产品的时候，需要增加一个实现类 和 一个工厂

3建造者模式：配置一个复杂对象。
1独立，容易扩展
2如果对象复杂，会有很多建造者类。

4适配器模式：解决两个不兼容接口的桥梁,兼容转换。
1优点：让两个没有关联的类一起运行，提高复用。
2缺点：使用过多，会让系统变的凌乱。

5装饰器模式：用来动态的扩展对象的功能，也是继承关系的的一种替代方案之一。在不使用的继承的方式下，采用装饰设计模式可以扩展一个对象的功能，可以使一个对象变得越来越强大。

6代理模式

7策略模式

8观察者模式（Observer Pattern）
目的：一个对象改变通知其他对象，保证协作。
优点：观察者和被观察者是抽象耦合的，也就是说通过抽象方法，给具体的类通知。
缺点：如果观察者有很多，被观察者发消息，会慢，如果不小心观察者和被观察者有依赖，会循环引用。
